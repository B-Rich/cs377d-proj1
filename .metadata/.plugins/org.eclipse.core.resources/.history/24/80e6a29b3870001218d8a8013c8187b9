#!/usr/bin/env python
#
# Copyright 2007 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from contextIO2 import ContextIO, Account
from google.appengine.api import users
from oauth2client.appengine import OAuth2Decorator, CredentialsModel, StorageByKeyName
import logging
import json
import webapp2
import settings
from model import User

# Create an instance of the DocsService to make API calls

decorator = OAuth2Decorator(
    client_id=settings.APPENGINE_CONSUMER_KEY,
    client_secret=settings.APPENGINE_CONSUMER_SECRET,
    scope=['https://mail.google.com', 'https://www.googleapis.com/auth/userinfo.profile', 'https://www.googleapis.com/auth/userinfo.email'],
    callback_path='/oauth/callback' 
)

class GrantAccessHandler(webapp2.RequestHandler):
    @decorator.oauth_aware
    def get(self):
        if decorator.has_credentials():
            current_user = users.get_current_user()
            refresh_token = decorator.credentials.refresh_token
            ctxIO = ContextIO(consumer_key=settings.CONTEXTIO_OAUTH_KEY, 
                              consumer_secret=settings.CONTEXTIO_OAUTH_SECRET)
            current_account = ctxIO.post_account(email=current_user.email())
            user = User.get_or_insert(key_name = current_user.email(), 
                                        user_id=current_user.user_id(), 
                                        user_ctx_id=current_account.id,
                                        email=current_user.email())
            
            if refresh_token and not user.is_oauth_complete:
                current_sources = current_account.post_source(email=current_user.email(),
                                                   username=current_user.email(),
                                                   server='imap.gmail.com',
                                                   provider_refresh_token=refresh_token,
                                                   provider_consumer_key=settings.APPENGINE_CONSUMER_KEY)
                current_sources = current_account.get_sources(status_ok = 1)  
                user.is_oauth_complete = any([current_source['server'] == 'imap.gmail.com' for current_source in current_sources])
                user.put()
            self.response.out.write(r"""<html><head><script type="text/javascript">window.close();</script></head><body><div id="sbi_camera_button" class="sbi_search" style="left: 0px; top: 0px; position: absolute; width: 29px; height: 27px; border: none; margin: 0px; padding: 0px; z-index: 2147483647; display: none;"></div></body></html>""")
        else:
            self.redirect(decorator.authorize_url()) 
 
app = webapp2.WSGIApplication([('/oauth/grantAccess', GrantAccessHandler),
                             ('/oauth/callback', decorator.callback_handler())],
                             debug=True)
